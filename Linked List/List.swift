import Foundation

class List {
    var head: Node?
    var tail: Node?
    
    // Операція визначення довжини списку. Якщо список непорожній, то ця операція повинна повертати кількість елементів у списку. Якщо список порожній, то ця операція повинна повертати 0.
    func length() -> Int {
        if self.head == nil {
            return 0
        }
        
        if self.head === self.tail {
            return 1
        }
        
        var length: Int = 2

        var tempNode: Node? = self.head?.next
        while tempNode !== self.tail {
            length += 1
            tempNode = tempNode?.next
        }
        
        return length
    }
    
    // Операція додавання елементу в кінець списку.
    func append(element: Character) {
        let node = Node(value: element)
        
        if self.head == nil {
            self.head = node
        } else {
            node.previous = self.tail
            self.tail?.next = node
        }
        self.tail = node
    }
    
    // Операція вставки елементу на довільну позицію у списку. Нумерація елементів списку починається з 0.
    /// У випадку передачі некоректного значення позиції (наприклад, від’ємне число, або число, більше за кількість елементів у списку) метод повинен генерувати виключну ситуацію
    func insert(element: Character, index: Int) {
        let length = self.length()
        
        if index < 0 || index >= length {
            print("Index is out of range")
        } else if index == length {
            self.append(element: element)
        } else if index == 0 {
            let node = Node(value: element)
            
            self.head?.previous = node
            node.next = self.head
            self.head = node
        } else {
            let node = Node(value: element)
            
            var currentNode = self.head
            for _ in 0..<index {
                currentNode = currentNode?.next
            }
            
            currentNode?.previous?.next = node
            node.previous = currentNode?.previous
            currentNode?.previous = node
            node.next = currentNode
        }
    }
    
    //TODO: Операція видалення елементу зі списку на вказаній позиції. Метод повинен повертати значення того елементу, який видаляється. Нумерація елементів списку починається з 0.
    /// У випадку передачі некоректного значення позиції (наприклад, від’ємне число, або число, більше за індекс останнього елементу списку) метод повинен генерувати виключну ситуацію
//    func delete(index: Int) -> Character {
//
//    }
    
    //TODO: Операція видалення елементів зі списку за значенням. Метод видаляє зі списку усі елементи, які за значенням відповідають шуканому.
    /// У випадку передачі елемента, який у списку відсутній, жодні зміни до списку не застосовуються.
//    func deleteAll(element: Character) {
//
//    }
    
    //TODO: Операція отримання елементу списку на довільній позиції
    /// У випадку передачі некоректного значення позиції (наприклад, від’ємне число, або число, більше за індекс останнього елементу списку) метод повинен генерувати виключну ситуацію
//    func get(index: Int) -> Character {
//
//    }
    
    //TODO: Операція копіювання списку. При виклику повинен створити копію поточного списку та повернути її.
//    func clone() -> List {
//
//    }
    
    //TODO: Операція обернення списку. Метод повинен змінити порядок елементів у поточному списку задом наперед. Елемент, що був останнім стане першим, передостаннім — другим, … а перший — останнім.
//    func reverse() {
//
//    }
    
    //TODO: Операція пошуку елемента за значенням з голови списку. Метод повинен знайти перший елемент у списку, що дорівнює шуканому та повернути його позицію. Нумерація елементів списку починається з 0. У випадку відсутності шуканого елемента у списку, метод повертає -1
//    func findFirst(element: Character) -> Int {
//
//    }
    
    //TODO: Операція пошуку елемента за значенням з хвоста списку. Метод повинен знайти останній елемент у списку, що дорівнює шуканому та повернути його позицію. Нумерація елементів списку починається з 0. У випадку відсутності шуканого елемента у списку, метод повертає -1.
//    func findLast(element: Character) -> Int {
//
//    }
    
    //TODO: Операція очищення списку. Метод видаляє усі елементи списку.
//    func clear() {
//
//    }
    
    //TODO: Операція розширення списку. Метод приймає інший список та додає до поточного списку усі елементи останнього. При цьому подальші зміни в другий список не повинні впливати на перший.
//    func extend(elements: List) {
//
//    }
}
